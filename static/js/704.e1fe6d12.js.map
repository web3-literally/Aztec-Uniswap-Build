{"version":3,"file":"static/js/704.e1fe6d12.js","mappings":"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","sources":["../node_modules/ieee754/index.js","../node_modules/immer/src/utils/errors.ts","../node_modules/immer/src/utils/common.ts","../node_modules/immer/src/utils/plugins.ts","../node_modules/immer/src/core/scope.ts","../node_modules/immer/src/core/finalize.ts","../node_modules/immer/src/core/proxy.ts","../node_modules/immer/src/core/immerClass.ts","../node_modules/immer/src/core/current.ts","../node_modules/immer/src/plugins/es5.ts","../node_modules/immer/src/plugins/patches.ts","../node_modules/immer/src/immer.ts","../node_modules/immer/src/utils/env.ts"],"sourcesContent":["/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","const errors = {\n\t0: \"Illegal state\",\n\t1: \"Immer drafts cannot have computed properties\",\n\t2: \"This object has been frozen and should not be mutated\",\n\t3(data: any) {\n\t\treturn (\n\t\t\t\"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" +\n\t\t\tdata\n\t\t)\n\t},\n\t4: \"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\",\n\t5: \"Immer forbids circular references\",\n\t6: \"The first or second argument to `produce` must be a function\",\n\t7: \"The third argument to `produce` must be a function or undefined\",\n\t8: \"First argument to `createDraft` must be a plain object, an array, or an immerable object\",\n\t9: \"First argument to `finishDraft` must be a draft returned by `createDraft`\",\n\t10: \"The given draft is already finalized\",\n\t11: \"Object.defineProperty() cannot be used on an Immer draft\",\n\t12: \"Object.setPrototypeOf() cannot be used on an Immer draft\",\n\t13: \"Immer only supports deleting array indices\",\n\t14: \"Immer only supports setting array indices and the 'length' property\",\n\t15(path: string) {\n\t\treturn \"Cannot apply patch, path doesn't resolve: \" + path\n\t},\n\t16: 'Sets cannot have \"replace\" patches.',\n\t17(op: string) {\n\t\treturn \"Unsupported patch operation: \" + op\n\t},\n\t18(plugin: string) {\n\t\treturn `The plugin for '${plugin}' has not been loaded into Immer. To enable the plugin, import and call \\`enable${plugin}()\\` when initializing your application.`\n\t},\n\t20: \"Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available\",\n\t21(thing: string) {\n\t\treturn `produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '${thing}'`\n\t},\n\t22(thing: string) {\n\t\treturn `'current' expects a draft, got: ${thing}`\n\t},\n\t23(thing: string) {\n\t\treturn `'original' expects a draft, got: ${thing}`\n\t},\n\t24: \"Patching reserved attributes like __proto__, prototype and constructor is not allowed\"\n} as const\n\nexport function die(error: keyof typeof errors, ...args: any[]): never {\n\tif (__DEV__) {\n\t\tconst e = errors[error]\n\t\tconst msg = !e\n\t\t\t? \"unknown error nr: \" + error\n\t\t\t: typeof e === \"function\"\n\t\t\t? e.apply(null, args as any)\n\t\t\t: e\n\t\tthrow new Error(`[Immer] ${msg}`)\n\t}\n\tthrow new Error(\n\t\t`[Immer] minified error nr: ${error}${\n\t\t\targs.length ? \" \" + args.map(s => `'${s}'`).join(\",\") : \"\"\n\t\t}. Find the full error at: https://bit.ly/3cXEKWf`\n\t)\n}\n","import {\n\tDRAFT_STATE,\n\tDRAFTABLE,\n\thasSet,\n\tObjectish,\n\tDrafted,\n\tAnyObject,\n\tAnyMap,\n\tAnySet,\n\tImmerState,\n\thasMap,\n\tArchtype,\n\tdie\n} from \"../internal\"\n\n/** Returns true if the given value is an Immer draft */\n/*#__PURE__*/\nexport function isDraft(value: any): boolean {\n\treturn !!value && !!value[DRAFT_STATE]\n}\n\n/** Returns true if the given value can be drafted by Immer */\n/*#__PURE__*/\nexport function isDraftable(value: any): boolean {\n\tif (!value) return false\n\treturn (\n\t\tisPlainObject(value) ||\n\t\tArray.isArray(value) ||\n\t\t!!value[DRAFTABLE] ||\n\t\t!!value.constructor[DRAFTABLE] ||\n\t\tisMap(value) ||\n\t\tisSet(value)\n\t)\n}\n\nconst objectCtorString = Object.prototype.constructor.toString()\n/*#__PURE__*/\nexport function isPlainObject(value: any): boolean {\n\tif (!value || typeof value !== \"object\") return false\n\tconst proto = Object.getPrototypeOf(value)\n\tif (proto === null) {\n\t\treturn true\n\t}\n\tconst Ctor =\n\t\tObject.hasOwnProperty.call(proto, \"constructor\") && proto.constructor\n\n\tif (Ctor === Object) return true\n\n\treturn (\n\t\ttypeof Ctor == \"function\" &&\n\t\tFunction.toString.call(Ctor) === objectCtorString\n\t)\n}\n\n/** Get the underlying object that is represented by the given draft */\n/*#__PURE__*/\nexport function original<T>(value: T): T | undefined\nexport function original(value: Drafted<any>): any {\n\tif (!isDraft(value)) die(23, value)\n\treturn value[DRAFT_STATE].base_\n}\n\n/*#__PURE__*/\nexport const ownKeys: (target: AnyObject) => PropertyKey[] =\n\ttypeof Reflect !== \"undefined\" && Reflect.ownKeys\n\t\t? Reflect.ownKeys\n\t\t: typeof Object.getOwnPropertySymbols !== \"undefined\"\n\t\t? obj =>\n\t\t\t\tObject.getOwnPropertyNames(obj).concat(\n\t\t\t\t\tObject.getOwnPropertySymbols(obj) as any\n\t\t\t\t)\n\t\t: /* istanbul ignore next */ Object.getOwnPropertyNames\n\nexport const getOwnPropertyDescriptors =\n\tObject.getOwnPropertyDescriptors ||\n\tfunction getOwnPropertyDescriptors(target: any) {\n\t\t// Polyfill needed for Hermes and IE, see https://github.com/facebook/hermes/issues/274\n\t\tconst res: any = {}\n\t\townKeys(target).forEach(key => {\n\t\t\tres[key] = Object.getOwnPropertyDescriptor(target, key)\n\t\t})\n\t\treturn res\n\t}\n\nexport function each<T extends Objectish>(\n\tobj: T,\n\titer: (key: string | number, value: any, source: T) => void,\n\tenumerableOnly?: boolean\n): void\nexport function each(obj: any, iter: any, enumerableOnly = false) {\n\tif (getArchtype(obj) === Archtype.Object) {\n\t\t;(enumerableOnly ? Object.keys : ownKeys)(obj).forEach(key => {\n\t\t\tif (!enumerableOnly || typeof key !== \"symbol\") iter(key, obj[key], obj)\n\t\t})\n\t} else {\n\t\tobj.forEach((entry: any, index: any) => iter(index, entry, obj))\n\t}\n}\n\n/*#__PURE__*/\nexport function getArchtype(thing: any): Archtype {\n\t/* istanbul ignore next */\n\tconst state: undefined | ImmerState = thing[DRAFT_STATE]\n\treturn state\n\t\t? state.type_ > 3\n\t\t\t? state.type_ - 4 // cause Object and Array map back from 4 and 5\n\t\t\t: (state.type_ as any) // others are the same\n\t\t: Array.isArray(thing)\n\t\t? Archtype.Array\n\t\t: isMap(thing)\n\t\t? Archtype.Map\n\t\t: isSet(thing)\n\t\t? Archtype.Set\n\t\t: Archtype.Object\n}\n\n/*#__PURE__*/\nexport function has(thing: any, prop: PropertyKey): boolean {\n\treturn getArchtype(thing) === Archtype.Map\n\t\t? thing.has(prop)\n\t\t: Object.prototype.hasOwnProperty.call(thing, prop)\n}\n\n/*#__PURE__*/\nexport function get(thing: AnyMap | AnyObject, prop: PropertyKey): any {\n\t// @ts-ignore\n\treturn getArchtype(thing) === Archtype.Map ? thing.get(prop) : thing[prop]\n}\n\n/*#__PURE__*/\nexport function set(thing: any, propOrOldValue: PropertyKey, value: any) {\n\tconst t = getArchtype(thing)\n\tif (t === Archtype.Map) thing.set(propOrOldValue, value)\n\telse if (t === Archtype.Set) {\n\t\tthing.delete(propOrOldValue)\n\t\tthing.add(value)\n\t} else thing[propOrOldValue] = value\n}\n\n/*#__PURE__*/\nexport function is(x: any, y: any): boolean {\n\t// From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n\tif (x === y) {\n\t\treturn x !== 0 || 1 / x === 1 / y\n\t} else {\n\t\treturn x !== x && y !== y\n\t}\n}\n\n/*#__PURE__*/\nexport function isMap(target: any): target is AnyMap {\n\treturn hasMap && target instanceof Map\n}\n\n/*#__PURE__*/\nexport function isSet(target: any): target is AnySet {\n\treturn hasSet && target instanceof Set\n}\n/*#__PURE__*/\nexport function latest(state: ImmerState): any {\n\treturn state.copy_ || state.base_\n}\n\n/*#__PURE__*/\nexport function shallowCopy(base: any) {\n\tif (Array.isArray(base)) return Array.prototype.slice.call(base)\n\tconst descriptors = getOwnPropertyDescriptors(base)\n\tdelete descriptors[DRAFT_STATE as any]\n\tlet keys = ownKeys(descriptors)\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tconst key: any = keys[i]\n\t\tconst desc = descriptors[key]\n\t\tif (desc.writable === false) {\n\t\t\tdesc.writable = true\n\t\t\tdesc.configurable = true\n\t\t}\n\t\t// like object.assign, we will read any _own_, get/set accessors. This helps in dealing\n\t\t// with libraries that trap values, like mobx or vue\n\t\t// unlike object.assign, non-enumerables will be copied as well\n\t\tif (desc.get || desc.set)\n\t\t\tdescriptors[key] = {\n\t\t\t\tconfigurable: true,\n\t\t\t\twritable: true, // could live with !!desc.set as well here...\n\t\t\t\tenumerable: desc.enumerable,\n\t\t\t\tvalue: base[key]\n\t\t\t}\n\t}\n\treturn Object.create(Object.getPrototypeOf(base), descriptors)\n}\n\n/**\n * Freezes draftable objects. Returns the original object.\n * By default freezes shallowly, but if the second argument is `true` it will freeze recursively.\n *\n * @param obj\n * @param deep\n */\nexport function freeze<T>(obj: T, deep?: boolean): T\nexport function freeze<T>(obj: any, deep: boolean = false): T {\n\tif (isFrozen(obj) || isDraft(obj) || !isDraftable(obj)) return obj\n\tif (getArchtype(obj) > 1 /* Map or Set */) {\n\t\tobj.set = obj.add = obj.clear = obj.delete = dontMutateFrozenCollections as any\n\t}\n\tObject.freeze(obj)\n\tif (deep) each(obj, (key, value) => freeze(value, true), true)\n\treturn obj\n}\n\nfunction dontMutateFrozenCollections() {\n\tdie(2)\n}\n\nexport function isFrozen(obj: any): boolean {\n\tif (obj == null || typeof obj !== \"object\") return true\n\t// See #600, IE dies on non-objects in Object.isFrozen\n\treturn Object.isFrozen(obj)\n}\n","import {\n\tImmerState,\n\tPatch,\n\tImmerScope,\n\tDrafted,\n\tAnyObject,\n\tImmerBaseState,\n\tAnyMap,\n\tAnySet,\n\tProxyType,\n\tdie\n} from \"../internal\"\n\n/** Plugin utilities */\nconst plugins: {\n\tPatches?: {\n\t\tgeneratePatches_(\n\t\t\tstate: ImmerState,\n\t\t\tbasePath: PatchPath,\n\t\t\tpatches: Patch[],\n\t\t\tinversePatches: Patch[]\n\t\t): void\n\t\tgenerateReplacementPatches_(\n\t\t\tbase: any,\n\t\t\treplacement: any,\n\t\t\tpatches: Patch[],\n\t\t\tinversePatches: Patch[]\n\t\t): void\n\t\tapplyPatches_<T>(draft: T, patches: Patch[]): T\n\t}\n\tES5?: {\n\t\twillFinalizeES5_(scope: ImmerScope, result: any, isReplaced: boolean): void\n\t\tcreateES5Proxy_<T>(\n\t\t\tbase: T,\n\t\t\tparent?: ImmerState\n\t\t): Drafted<T, ES5ObjectState | ES5ArrayState>\n\t\thasChanges_(state: ES5ArrayState | ES5ObjectState): boolean\n\t}\n\tMapSet?: {\n\t\tproxyMap_<T extends AnyMap>(target: T, parent?: ImmerState): T\n\t\tproxySet_<T extends AnySet>(target: T, parent?: ImmerState): T\n\t}\n} = {}\n\ntype Plugins = typeof plugins\n\nexport function getPlugin<K extends keyof Plugins>(\n\tpluginKey: K\n): Exclude<Plugins[K], undefined> {\n\tconst plugin = plugins[pluginKey]\n\tif (!plugin) {\n\t\tdie(18, pluginKey)\n\t}\n\t// @ts-ignore\n\treturn plugin\n}\n\nexport function loadPlugin<K extends keyof Plugins>(\n\tpluginKey: K,\n\timplementation: Plugins[K]\n): void {\n\tif (!plugins[pluginKey]) plugins[pluginKey] = implementation\n}\n\n/** ES5 Plugin */\n\ninterface ES5BaseState extends ImmerBaseState {\n\tassigned_: {[key: string]: any}\n\tparent_?: ImmerState\n\trevoked_: boolean\n}\n\nexport interface ES5ObjectState extends ES5BaseState {\n\ttype_: ProxyType.ES5Object\n\tdraft_: Drafted<AnyObject, ES5ObjectState>\n\tbase_: AnyObject\n\tcopy_: AnyObject | null\n}\n\nexport interface ES5ArrayState extends ES5BaseState {\n\ttype_: ProxyType.ES5Array\n\tdraft_: Drafted<AnyObject, ES5ArrayState>\n\tbase_: any\n\tcopy_: any\n}\n\n/** Map / Set plugin */\n\nexport interface MapState extends ImmerBaseState {\n\ttype_: ProxyType.Map\n\tcopy_: AnyMap | undefined\n\tassigned_: Map<any, boolean> | undefined\n\tbase_: AnyMap\n\trevoked_: boolean\n\tdraft_: Drafted<AnyMap, MapState>\n}\n\nexport interface SetState extends ImmerBaseState {\n\ttype_: ProxyType.Set\n\tcopy_: AnySet | undefined\n\tbase_: AnySet\n\tdrafts_: Map<any, Drafted> // maps the original value to the draft value in the new set\n\trevoked_: boolean\n\tdraft_: Drafted<AnySet, SetState>\n}\n\n/** Patches plugin */\n\nexport type PatchPath = (string | number)[]\n","import {\n\tPatch,\n\tPatchListener,\n\tDrafted,\n\tImmer,\n\tDRAFT_STATE,\n\tImmerState,\n\tProxyType,\n\tgetPlugin\n} from \"../internal\"\nimport {die} from \"../utils/errors\"\n\n/** Each scope represents a `produce` call. */\n\nexport interface ImmerScope {\n\tpatches_?: Patch[]\n\tinversePatches_?: Patch[]\n\tcanAutoFreeze_: boolean\n\tdrafts_: any[]\n\tparent_?: ImmerScope\n\tpatchListener_?: PatchListener\n\timmer_: Immer\n\tunfinalizedDrafts_: number\n}\n\nlet currentScope: ImmerScope | undefined\n\nexport function getCurrentScope() {\n\tif (__DEV__ && !currentScope) die(0)\n\treturn currentScope!\n}\n\nfunction createScope(\n\tparent_: ImmerScope | undefined,\n\timmer_: Immer\n): ImmerScope {\n\treturn {\n\t\tdrafts_: [],\n\t\tparent_,\n\t\timmer_,\n\t\t// Whenever the modified draft contains a draft from another scope, we\n\t\t// need to prevent auto-freezing so the unowned draft can be finalized.\n\t\tcanAutoFreeze_: true,\n\t\tunfinalizedDrafts_: 0\n\t}\n}\n\nexport function usePatchesInScope(\n\tscope: ImmerScope,\n\tpatchListener?: PatchListener\n) {\n\tif (patchListener) {\n\t\tgetPlugin(\"Patches\") // assert we have the plugin\n\t\tscope.patches_ = []\n\t\tscope.inversePatches_ = []\n\t\tscope.patchListener_ = patchListener\n\t}\n}\n\nexport function revokeScope(scope: ImmerScope) {\n\tleaveScope(scope)\n\tscope.drafts_.forEach(revokeDraft)\n\t// @ts-ignore\n\tscope.drafts_ = null\n}\n\nexport function leaveScope(scope: ImmerScope) {\n\tif (scope === currentScope) {\n\t\tcurrentScope = scope.parent_\n\t}\n}\n\nexport function enterScope(immer: Immer) {\n\treturn (currentScope = createScope(currentScope, immer))\n}\n\nfunction revokeDraft(draft: Drafted) {\n\tconst state: ImmerState = draft[DRAFT_STATE]\n\tif (\n\t\tstate.type_ === ProxyType.ProxyObject ||\n\t\tstate.type_ === ProxyType.ProxyArray\n\t)\n\t\tstate.revoke_()\n\telse state.revoked_ = true\n}\n","import {\n\tImmerScope,\n\tDRAFT_STATE,\n\tisDraftable,\n\tNOTHING,\n\tPatchPath,\n\teach,\n\thas,\n\tfreeze,\n\tImmerState,\n\tisDraft,\n\tSetState,\n\tset,\n\tProxyType,\n\tgetPlugin,\n\tdie,\n\trevokeScope,\n\tisFrozen,\n\tshallowCopy\n} from \"../internal\"\n\nexport function processResult(result: any, scope: ImmerScope) {\n\tscope.unfinalizedDrafts_ = scope.drafts_.length\n\tconst baseDraft = scope.drafts_![0]\n\tconst isReplaced = result !== undefined && result !== baseDraft\n\tif (!scope.immer_.useProxies_)\n\t\tgetPlugin(\"ES5\").willFinalizeES5_(scope, result, isReplaced)\n\tif (isReplaced) {\n\t\tif (baseDraft[DRAFT_STATE].modified_) {\n\t\t\trevokeScope(scope)\n\t\t\tdie(4)\n\t\t}\n\t\tif (isDraftable(result)) {\n\t\t\t// Finalize the result in case it contains (or is) a subset of the draft.\n\t\t\tresult = finalize(scope, result)\n\t\t\tif (!scope.parent_) maybeFreeze(scope, result)\n\t\t}\n\t\tif (scope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generateReplacementPatches_(\n\t\t\t\tbaseDraft[DRAFT_STATE].base_,\n\t\t\t\tresult,\n\t\t\t\tscope.patches_,\n\t\t\t\tscope.inversePatches_!\n\t\t\t)\n\t\t}\n\t} else {\n\t\t// Finalize the base draft.\n\t\tresult = finalize(scope, baseDraft, [])\n\t}\n\trevokeScope(scope)\n\tif (scope.patches_) {\n\t\tscope.patchListener_!(scope.patches_, scope.inversePatches_!)\n\t}\n\treturn result !== NOTHING ? result : undefined\n}\n\nfunction finalize(rootScope: ImmerScope, value: any, path?: PatchPath) {\n\t// Don't recurse in tho recursive data structures\n\tif (isFrozen(value)) return value\n\n\tconst state: ImmerState = value[DRAFT_STATE]\n\t// A plain object, might need freezing, might contain drafts\n\tif (!state) {\n\t\teach(\n\t\t\tvalue,\n\t\t\t(key, childValue) =>\n\t\t\t\tfinalizeProperty(rootScope, state, value, key, childValue, path),\n\t\t\ttrue // See #590, don't recurse into non-enumerable of non drafted objects\n\t\t)\n\t\treturn value\n\t}\n\t// Never finalize drafts owned by another scope.\n\tif (state.scope_ !== rootScope) return value\n\t// Unmodified draft, return the (frozen) original\n\tif (!state.modified_) {\n\t\tmaybeFreeze(rootScope, state.base_, true)\n\t\treturn state.base_\n\t}\n\t// Not finalized yet, let's do that now\n\tif (!state.finalized_) {\n\t\tstate.finalized_ = true\n\t\tstate.scope_.unfinalizedDrafts_--\n\t\tconst result =\n\t\t\t// For ES5, create a good copy from the draft first, with added keys and without deleted keys.\n\t\t\tstate.type_ === ProxyType.ES5Object || state.type_ === ProxyType.ES5Array\n\t\t\t\t? (state.copy_ = shallowCopy(state.draft_))\n\t\t\t\t: state.copy_\n\t\t// Finalize all children of the copy\n\t\t// For sets we clone before iterating, otherwise we can get in endless loop due to modifying during iteration, see #628\n\t\t// Although the original test case doesn't seem valid anyway, so if this in the way we can turn the next line\n\t\t// back to each(result, ....)\n\t\teach(\n\t\t\tstate.type_ === ProxyType.Set ? new Set(result) : result,\n\t\t\t(key, childValue) =>\n\t\t\t\tfinalizeProperty(rootScope, state, result, key, childValue, path)\n\t\t)\n\t\t// everything inside is frozen, we can freeze here\n\t\tmaybeFreeze(rootScope, result, false)\n\t\t// first time finalizing, let's create those patches\n\t\tif (path && rootScope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generatePatches_(\n\t\t\t\tstate,\n\t\t\t\tpath,\n\t\t\t\trootScope.patches_,\n\t\t\t\trootScope.inversePatches_!\n\t\t\t)\n\t\t}\n\t}\n\treturn state.copy_\n}\n\nfunction finalizeProperty(\n\trootScope: ImmerScope,\n\tparentState: undefined | ImmerState,\n\ttargetObject: any,\n\tprop: string | number,\n\tchildValue: any,\n\trootPath?: PatchPath\n) {\n\tif (__DEV__ && childValue === targetObject) die(5)\n\tif (isDraft(childValue)) {\n\t\tconst path =\n\t\t\trootPath &&\n\t\t\tparentState &&\n\t\t\tparentState!.type_ !== ProxyType.Set && // Set objects are atomic since they have no keys.\n\t\t\t!has((parentState as Exclude<ImmerState, SetState>).assigned_!, prop) // Skip deep patches for assigned keys.\n\t\t\t\t? rootPath!.concat(prop)\n\t\t\t\t: undefined\n\t\t// Drafts owned by `scope` are finalized here.\n\t\tconst res = finalize(rootScope, childValue, path)\n\t\tset(targetObject, prop, res)\n\t\t// Drafts from another scope must prevented to be frozen\n\t\t// if we got a draft back from finalize, we're in a nested produce and shouldn't freeze\n\t\tif (isDraft(res)) {\n\t\t\trootScope.canAutoFreeze_ = false\n\t\t} else return\n\t}\n\t// Search new objects for unfinalized drafts. Frozen objects should never contain drafts.\n\tif (isDraftable(childValue) && !isFrozen(childValue)) {\n\t\tif (!rootScope.immer_.autoFreeze_ && rootScope.unfinalizedDrafts_ < 1) {\n\t\t\t// optimization: if an object is not a draft, and we don't have to\n\t\t\t// deepfreeze everything, and we are sure that no drafts are left in the remaining object\n\t\t\t// cause we saw and finalized all drafts already; we can stop visiting the rest of the tree.\n\t\t\t// This benefits especially adding large data tree's without further processing.\n\t\t\t// See add-data.js perf test\n\t\t\treturn\n\t\t}\n\t\tfinalize(rootScope, childValue)\n\t\t// immer deep freezes plain objects, so if there is no parent state, we freeze as well\n\t\tif (!parentState || !parentState.scope_.parent_)\n\t\t\tmaybeFreeze(rootScope, childValue)\n\t}\n}\n\nfunction maybeFreeze(scope: ImmerScope, value: any, deep = false) {\n\tif (scope.immer_.autoFreeze_ && scope.canAutoFreeze_) {\n\t\tfreeze(value, deep)\n\t}\n}\n","import {\n\teach,\n\thas,\n\tis,\n\tisDraftable,\n\tshallowCopy,\n\tlatest,\n\tImmerBaseState,\n\tImmerState,\n\tDrafted,\n\tAnyObject,\n\tAnyArray,\n\tObjectish,\n\tgetCurrentScope,\n\tDRAFT_STATE,\n\tdie,\n\tcreateProxy,\n\tProxyType\n} from \"../internal\"\n\ninterface ProxyBaseState extends ImmerBaseState {\n\tassigned_: {\n\t\t[property: string]: boolean\n\t}\n\tparent_?: ImmerState\n\trevoke_(): void\n}\n\nexport interface ProxyObjectState extends ProxyBaseState {\n\ttype_: ProxyType.ProxyObject\n\tbase_: any\n\tcopy_: any\n\tdraft_: Drafted<AnyObject, ProxyObjectState>\n}\n\nexport interface ProxyArrayState extends ProxyBaseState {\n\ttype_: ProxyType.ProxyArray\n\tbase_: AnyArray\n\tcopy_: AnyArray | null\n\tdraft_: Drafted<AnyArray, ProxyArrayState>\n}\n\ntype ProxyState = ProxyObjectState | ProxyArrayState\n\n/**\n * Returns a new draft of the `base` object.\n *\n * The second argument is the parent draft-state (used internally).\n */\nexport function createProxyProxy<T extends Objectish>(\n\tbase: T,\n\tparent?: ImmerState\n): Drafted<T, ProxyState> {\n\tconst isArray = Array.isArray(base)\n\tconst state: ProxyState = {\n\t\ttype_: isArray ? ProxyType.ProxyArray : (ProxyType.ProxyObject as any),\n\t\t// Track which produce call this is associated with.\n\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t// True for both shallow and deep changes.\n\t\tmodified_: false,\n\t\t// Used during finalization.\n\t\tfinalized_: false,\n\t\t// Track which properties have been assigned (true) or deleted (false).\n\t\tassigned_: {},\n\t\t// The parent draft state.\n\t\tparent_: parent,\n\t\t// The base state.\n\t\tbase_: base,\n\t\t// The base proxy.\n\t\tdraft_: null as any, // set below\n\t\t// The base copy with any updated values.\n\t\tcopy_: null,\n\t\t// Called by the `produce` function.\n\t\trevoke_: null as any,\n\t\tisManual_: false\n\t}\n\n\t// the traps must target something, a bit like the 'real' base.\n\t// but also, we need to be able to determine from the target what the relevant state is\n\t// (to avoid creating traps per instance to capture the state in closure,\n\t// and to avoid creating weird hidden properties as well)\n\t// So the trick is to use 'state' as the actual 'target'! (and make sure we intercept everything)\n\t// Note that in the case of an array, we put the state in an array to have better Reflect defaults ootb\n\tlet target: T = state as any\n\tlet traps: ProxyHandler<object | Array<any>> = objectTraps\n\tif (isArray) {\n\t\ttarget = [state] as any\n\t\ttraps = arrayTraps\n\t}\n\n\tconst {revoke, proxy} = Proxy.revocable(target, traps)\n\tstate.draft_ = proxy as any\n\tstate.revoke_ = revoke\n\treturn proxy as any\n}\n\n/**\n * Object drafts\n */\nexport const objectTraps: ProxyHandler<ProxyState> = {\n\tget(state, prop) {\n\t\tif (prop === DRAFT_STATE) return state\n\n\t\tconst source = latest(state)\n\t\tif (!has(source, prop)) {\n\t\t\t// non-existing or non-own property...\n\t\t\treturn readPropFromProto(state, source, prop)\n\t\t}\n\t\tconst value = source[prop]\n\t\tif (state.finalized_ || !isDraftable(value)) {\n\t\t\treturn value\n\t\t}\n\t\t// Check for existing draft in modified state.\n\t\t// Assigned values are never drafted. This catches any drafts we created, too.\n\t\tif (value === peek(state.base_, prop)) {\n\t\t\tprepareCopy(state)\n\t\t\treturn (state.copy_![prop as any] = createProxy(\n\t\t\t\tstate.scope_.immer_,\n\t\t\t\tvalue,\n\t\t\t\tstate\n\t\t\t))\n\t\t}\n\t\treturn value\n\t},\n\thas(state, prop) {\n\t\treturn prop in latest(state)\n\t},\n\townKeys(state) {\n\t\treturn Reflect.ownKeys(latest(state))\n\t},\n\tset(\n\t\tstate: ProxyObjectState,\n\t\tprop: string /* strictly not, but helps TS */,\n\t\tvalue\n\t) {\n\t\tconst desc = getDescriptorFromProto(latest(state), prop)\n\t\tif (desc?.set) {\n\t\t\t// special case: if this write is captured by a setter, we have\n\t\t\t// to trigger it with the correct context\n\t\t\tdesc.set.call(state.draft_, value)\n\t\t\treturn true\n\t\t}\n\t\tif (!state.modified_) {\n\t\t\t// the last check is because we need to be able to distinguish setting a non-existing to undefined (which is a change)\n\t\t\t// from setting an existing property with value undefined to undefined (which is not a change)\n\t\t\tconst current = peek(latest(state), prop)\n\t\t\t// special case, if we assigning the original value to a draft, we can ignore the assignment\n\t\t\tconst currentState: ProxyObjectState = current?.[DRAFT_STATE]\n\t\t\tif (currentState && currentState.base_ === value) {\n\t\t\t\tstate.copy_![prop] = value\n\t\t\t\tstate.assigned_[prop] = false\n\t\t\t\treturn true\n\t\t\t}\n\t\t\tif (is(value, current) && (value !== undefined || has(state.base_, prop)))\n\t\t\t\treturn true\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t}\n\n\t\tif (\n\t\t\tstate.copy_![prop] === value &&\n\t\t\t// special case: NaN\n\t\t\ttypeof value !== \"number\" &&\n\t\t\t// special case: handle new props with value 'undefined'\n\t\t\t(value !== undefined || prop in state.copy_)\n\t\t)\n\t\t\treturn true\n\n\t\t// @ts-ignore\n\t\tstate.copy_![prop] = value\n\t\tstate.assigned_[prop] = true\n\t\treturn true\n\t},\n\tdeleteProperty(state, prop: string) {\n\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\tif (peek(state.base_, prop) !== undefined || prop in state.base_) {\n\t\t\tstate.assigned_[prop] = false\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t} else {\n\t\t\t// if an originally not assigned property was deleted\n\t\t\tdelete state.assigned_[prop]\n\t\t}\n\t\t// @ts-ignore\n\t\tif (state.copy_) delete state.copy_[prop]\n\t\treturn true\n\t},\n\t// Note: We never coerce `desc.value` into an Immer draft, because we can't make\n\t// the same guarantee in ES5 mode.\n\tgetOwnPropertyDescriptor(state, prop) {\n\t\tconst owner = latest(state)\n\t\tconst desc = Reflect.getOwnPropertyDescriptor(owner, prop)\n\t\tif (!desc) return desc\n\t\treturn {\n\t\t\twritable: true,\n\t\t\tconfigurable: state.type_ !== ProxyType.ProxyArray || prop !== \"length\",\n\t\t\tenumerable: desc.enumerable,\n\t\t\tvalue: owner[prop]\n\t\t}\n\t},\n\tdefineProperty() {\n\t\tdie(11)\n\t},\n\tgetPrototypeOf(state) {\n\t\treturn Object.getPrototypeOf(state.base_)\n\t},\n\tsetPrototypeOf() {\n\t\tdie(12)\n\t}\n}\n\n/**\n * Array drafts\n */\n\nconst arrayTraps: ProxyHandler<[ProxyArrayState]> = {}\neach(objectTraps, (key, fn) => {\n\t// @ts-ignore\n\tarrayTraps[key] = function() {\n\t\targuments[0] = arguments[0][0]\n\t\treturn fn.apply(this, arguments)\n\t}\n})\narrayTraps.deleteProperty = function(state, prop) {\n\tif (__DEV__ && isNaN(parseInt(prop as any))) die(13)\n\t// @ts-ignore\n\treturn arrayTraps.set!.call(this, state, prop, undefined)\n}\narrayTraps.set = function(state, prop, value) {\n\tif (__DEV__ && prop !== \"length\" && isNaN(parseInt(prop as any))) die(14)\n\treturn objectTraps.set!.call(this, state[0], prop, value, state[0])\n}\n\n// Access a property without creating an Immer draft.\nfunction peek(draft: Drafted, prop: PropertyKey) {\n\tconst state = draft[DRAFT_STATE]\n\tconst source = state ? latest(state) : draft\n\treturn source[prop]\n}\n\nfunction readPropFromProto(state: ImmerState, source: any, prop: PropertyKey) {\n\tconst desc = getDescriptorFromProto(source, prop)\n\treturn desc\n\t\t? `value` in desc\n\t\t\t? desc.value\n\t\t\t: // This is a very special case, if the prop is a getter defined by the\n\t\t\t  // prototype, we should invoke it with the draft as context!\n\t\t\t  desc.get?.call(state.draft_)\n\t\t: undefined\n}\n\nfunction getDescriptorFromProto(\n\tsource: any,\n\tprop: PropertyKey\n): PropertyDescriptor | undefined {\n\t// 'in' checks proto!\n\tif (!(prop in source)) return undefined\n\tlet proto = Object.getPrototypeOf(source)\n\twhile (proto) {\n\t\tconst desc = Object.getOwnPropertyDescriptor(proto, prop)\n\t\tif (desc) return desc\n\t\tproto = Object.getPrototypeOf(proto)\n\t}\n\treturn undefined\n}\n\nexport function markChanged(state: ImmerState) {\n\tif (!state.modified_) {\n\t\tstate.modified_ = true\n\t\tif (state.parent_) {\n\t\t\tmarkChanged(state.parent_)\n\t\t}\n\t}\n}\n\nexport function prepareCopy(state: {base_: any; copy_: any}) {\n\tif (!state.copy_) {\n\t\tstate.copy_ = shallowCopy(state.base_)\n\t}\n}\n","import {\n\tIProduceWithPatches,\n\tIProduce,\n\tImmerState,\n\tDrafted,\n\tisDraftable,\n\tprocessResult,\n\tPatch,\n\tObjectish,\n\tDRAFT_STATE,\n\tDraft,\n\tPatchListener,\n\tisDraft,\n\tisMap,\n\tisSet,\n\tcreateProxyProxy,\n\tgetPlugin,\n\tdie,\n\thasProxies,\n\tenterScope,\n\trevokeScope,\n\tleaveScope,\n\tusePatchesInScope,\n\tgetCurrentScope,\n\tNOTHING,\n\tfreeze,\n\tcurrent\n} from \"../internal\"\n\ninterface ProducersFns {\n\tproduce: IProduce\n\tproduceWithPatches: IProduceWithPatches\n}\n\nexport class Immer implements ProducersFns {\n\tuseProxies_: boolean = hasProxies\n\n\tautoFreeze_: boolean = true\n\n\tconstructor(config?: {useProxies?: boolean; autoFreeze?: boolean}) {\n\t\tif (typeof config?.useProxies === \"boolean\")\n\t\t\tthis.setUseProxies(config!.useProxies)\n\t\tif (typeof config?.autoFreeze === \"boolean\")\n\t\t\tthis.setAutoFreeze(config!.autoFreeze)\n\t}\n\n\t/**\n\t * The `produce` function takes a value and a \"recipe function\" (whose\n\t * return value often depends on the base state). The recipe function is\n\t * free to mutate its first argument however it wants. All mutations are\n\t * only ever applied to a __copy__ of the base state.\n\t *\n\t * Pass only a function to create a \"curried producer\" which relieves you\n\t * from passing the recipe function every time.\n\t *\n\t * Only plain objects and arrays are made mutable. All other objects are\n\t * considered uncopyable.\n\t *\n\t * Note: This function is __bound__ to its `Immer` instance.\n\t *\n\t * @param {any} base - the initial state\n\t * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n\t * @param {Function} patchListener - optional function that will be called with all the patches produced here\n\t * @returns {any} a new state, or the initial state if nothing was modified\n\t */\n\tproduce: IProduce = (base: any, recipe?: any, patchListener?: any) => {\n\t\t// curried invocation\n\t\tif (typeof base === \"function\" && typeof recipe !== \"function\") {\n\t\t\tconst defaultBase = recipe\n\t\t\trecipe = base\n\n\t\t\tconst self = this\n\t\t\treturn function curriedProduce(\n\t\t\t\tthis: any,\n\t\t\t\tbase = defaultBase,\n\t\t\t\t...args: any[]\n\t\t\t) {\n\t\t\t\treturn self.produce(base, (draft: Drafted) => recipe.call(this, draft, ...args)) // prettier-ignore\n\t\t\t}\n\t\t}\n\n\t\tif (typeof recipe !== \"function\") die(6)\n\t\tif (patchListener !== undefined && typeof patchListener !== \"function\")\n\t\t\tdie(7)\n\n\t\tlet result\n\n\t\t// Only plain objects, arrays, and \"immerable classes\" are drafted.\n\t\tif (isDraftable(base)) {\n\t\t\tconst scope = enterScope(this)\n\t\t\tconst proxy = createProxy(this, base, undefined)\n\t\t\tlet hasError = true\n\t\t\ttry {\n\t\t\t\tresult = recipe(proxy)\n\t\t\t\thasError = false\n\t\t\t} finally {\n\t\t\t\t// finally instead of catch + rethrow better preserves original stack\n\t\t\t\tif (hasError) revokeScope(scope)\n\t\t\t\telse leaveScope(scope)\n\t\t\t}\n\t\t\tif (typeof Promise !== \"undefined\" && result instanceof Promise) {\n\t\t\t\treturn result.then(\n\t\t\t\t\tresult => {\n\t\t\t\t\t\tusePatchesInScope(scope, patchListener)\n\t\t\t\t\t\treturn processResult(result, scope)\n\t\t\t\t\t},\n\t\t\t\t\terror => {\n\t\t\t\t\t\trevokeScope(scope)\n\t\t\t\t\t\tthrow error\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t\tusePatchesInScope(scope, patchListener)\n\t\t\treturn processResult(result, scope)\n\t\t} else if (!base || typeof base !== \"object\") {\n\t\t\tresult = recipe(base)\n\t\t\tif (result === undefined) result = base\n\t\t\tif (result === NOTHING) result = undefined\n\t\t\tif (this.autoFreeze_) freeze(result, true)\n\t\t\tif (patchListener) {\n\t\t\t\tconst p: Patch[] = []\n\t\t\t\tconst ip: Patch[] = []\n\t\t\t\tgetPlugin(\"Patches\").generateReplacementPatches_(base, result, p, ip)\n\t\t\t\tpatchListener(p, ip)\n\t\t\t}\n\t\t\treturn result\n\t\t} else die(21, base)\n\t}\n\n\tproduceWithPatches: IProduceWithPatches = (\n\t\targ1: any,\n\t\targ2?: any,\n\t\targ3?: any\n\t): any => {\n\t\tif (typeof arg1 === \"function\") {\n\t\t\treturn (state: any, ...args: any[]) =>\n\t\t\t\tthis.produceWithPatches(state, (draft: any) => arg1(draft, ...args))\n\t\t}\n\n\t\tlet patches: Patch[], inversePatches: Patch[]\n\t\tconst result = this.produce(arg1, arg2, (p: Patch[], ip: Patch[]) => {\n\t\t\tpatches = p\n\t\t\tinversePatches = ip\n\t\t})\n\n\t\tif (typeof Promise !== \"undefined\" && result instanceof Promise) {\n\t\t\treturn result.then(nextState => [nextState, patches!, inversePatches!])\n\t\t}\n\t\treturn [result, patches!, inversePatches!]\n\t}\n\n\tcreateDraft<T extends Objectish>(base: T): Draft<T> {\n\t\tif (!isDraftable(base)) die(8)\n\t\tif (isDraft(base)) base = current(base)\n\t\tconst scope = enterScope(this)\n\t\tconst proxy = createProxy(this, base, undefined)\n\t\tproxy[DRAFT_STATE].isManual_ = true\n\t\tleaveScope(scope)\n\t\treturn proxy as any\n\t}\n\n\tfinishDraft<D extends Draft<any>>(\n\t\tdraft: D,\n\t\tpatchListener?: PatchListener\n\t): D extends Draft<infer T> ? T : never {\n\t\tconst state: ImmerState = draft && (draft as any)[DRAFT_STATE]\n\t\tif (__DEV__) {\n\t\t\tif (!state || !state.isManual_) die(9)\n\t\t\tif (state.finalized_) die(10)\n\t\t}\n\t\tconst {scope_: scope} = state\n\t\tusePatchesInScope(scope, patchListener)\n\t\treturn processResult(undefined, scope)\n\t}\n\n\t/**\n\t * Pass true to automatically freeze all copies created by Immer.\n\t *\n\t * By default, auto-freezing is enabled.\n\t */\n\tsetAutoFreeze(value: boolean) {\n\t\tthis.autoFreeze_ = value\n\t}\n\n\t/**\n\t * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\n\t * always faster than using ES5 proxies.\n\t *\n\t * By default, feature detection is used, so calling this is rarely necessary.\n\t */\n\tsetUseProxies(value: boolean) {\n\t\tif (value && !hasProxies) {\n\t\t\tdie(20)\n\t\t}\n\t\tthis.useProxies_ = value\n\t}\n\n\tapplyPatches<T extends Objectish>(base: T, patches: Patch[]): T {\n\t\t// If a patch replaces the entire state, take that replacement as base\n\t\t// before applying patches\n\t\tlet i: number\n\t\tfor (i = patches.length - 1; i >= 0; i--) {\n\t\t\tconst patch = patches[i]\n\t\t\tif (patch.path.length === 0 && patch.op === \"replace\") {\n\t\t\t\tbase = patch.value\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\t// If there was a patch that replaced the entire state, start from the\n\t\t// patch after that.\n\t\tif (i > -1) {\n\t\t\tpatches = patches.slice(i + 1)\n\t\t}\n\n\t\tconst applyPatchesImpl = getPlugin(\"Patches\").applyPatches_\n\t\tif (isDraft(base)) {\n\t\t\t// N.B: never hits if some patch a replacement, patches are never drafts\n\t\t\treturn applyPatchesImpl(base, patches)\n\t\t}\n\t\t// Otherwise, produce a copy of the base state.\n\t\treturn this.produce(base, (draft: Drafted) =>\n\t\t\tapplyPatchesImpl(draft, patches)\n\t\t)\n\t}\n}\n\nexport function createProxy<T extends Objectish>(\n\timmer: Immer,\n\tvalue: T,\n\tparent?: ImmerState\n): Drafted<T, ImmerState> {\n\t// precondition: createProxy should be guarded by isDraftable, so we know we can safely draft\n\tconst draft: Drafted = isMap(value)\n\t\t? getPlugin(\"MapSet\").proxyMap_(value, parent)\n\t\t: isSet(value)\n\t\t? getPlugin(\"MapSet\").proxySet_(value, parent)\n\t\t: immer.useProxies_\n\t\t? createProxyProxy(value, parent)\n\t\t: getPlugin(\"ES5\").createES5Proxy_(value, parent)\n\n\tconst scope = parent ? parent.scope_ : getCurrentScope()\n\tscope.drafts_.push(draft)\n\treturn draft\n}\n","import {\n\tdie,\n\tisDraft,\n\tshallowCopy,\n\teach,\n\tDRAFT_STATE,\n\tget,\n\tset,\n\tImmerState,\n\tisDraftable,\n\tArchtype,\n\tgetArchtype,\n\tgetPlugin\n} from \"../internal\"\n\n/** Takes a snapshot of the current state of a draft and finalizes it (but without freezing). This is a great utility to print the current state during debugging (no Proxies in the way). The output of current can also be safely leaked outside the producer. */\nexport function current<T>(value: T): T\nexport function current(value: any): any {\n\tif (!isDraft(value)) die(22, value)\n\treturn currentImpl(value)\n}\n\nfunction currentImpl(value: any): any {\n\tif (!isDraftable(value)) return value\n\tconst state: ImmerState | undefined = value[DRAFT_STATE]\n\tlet copy: any\n\tconst archType = getArchtype(value)\n\tif (state) {\n\t\tif (\n\t\t\t!state.modified_ &&\n\t\t\t(state.type_ < 4 || !getPlugin(\"ES5\").hasChanges_(state as any))\n\t\t)\n\t\t\treturn state.base_\n\t\t// Optimization: avoid generating new drafts during copying\n\t\tstate.finalized_ = true\n\t\tcopy = copyHelper(value, archType)\n\t\tstate.finalized_ = false\n\t} else {\n\t\tcopy = copyHelper(value, archType)\n\t}\n\n\teach(copy, (key, childValue) => {\n\t\tif (state && get(state.base_, key) === childValue) return // no need to copy or search in something that didn't change\n\t\tset(copy, key, currentImpl(childValue))\n\t})\n\t// In the future, we might consider freezing here, based on the current settings\n\treturn archType === Archtype.Set ? new Set(copy) : copy\n}\n\nfunction copyHelper(value: any, archType: number): any {\n\t// creates a shallow copy, even if it is a map or set\n\tswitch (archType) {\n\t\tcase Archtype.Map:\n\t\t\treturn new Map(value)\n\t\tcase Archtype.Set:\n\t\t\t// Set will be cloned as array temporarily, so that we can replace individual items\n\t\t\treturn Array.from(value)\n\t}\n\treturn shallowCopy(value)\n}\n","import {\n\tImmerState,\n\tDrafted,\n\tES5ArrayState,\n\tES5ObjectState,\n\teach,\n\thas,\n\tisDraft,\n\tlatest,\n\tDRAFT_STATE,\n\tis,\n\tloadPlugin,\n\tImmerScope,\n\tProxyType,\n\tgetCurrentScope,\n\tdie,\n\tmarkChanged,\n\tobjectTraps,\n\townKeys,\n\tgetOwnPropertyDescriptors\n} from \"../internal\"\n\ntype ES5State = ES5ArrayState | ES5ObjectState\n\nexport function enableES5() {\n\tfunction willFinalizeES5_(\n\t\tscope: ImmerScope,\n\t\tresult: any,\n\t\tisReplaced: boolean\n\t) {\n\t\tif (!isReplaced) {\n\t\t\tif (scope.patches_) {\n\t\t\t\tmarkChangesRecursively(scope.drafts_![0])\n\t\t\t}\n\t\t\t// This is faster when we don't care about which attributes changed.\n\t\t\tmarkChangesSweep(scope.drafts_)\n\t\t}\n\t\t// When a child draft is returned, look for changes.\n\t\telse if (\n\t\t\tisDraft(result) &&\n\t\t\t(result[DRAFT_STATE] as ES5State).scope_ === scope\n\t\t) {\n\t\t\tmarkChangesSweep(scope.drafts_)\n\t\t}\n\t}\n\n\tfunction createES5Draft(isArray: boolean, base: any) {\n\t\tif (isArray) {\n\t\t\tconst draft = new Array(base.length)\n\t\t\tfor (let i = 0; i < base.length; i++)\n\t\t\t\tObject.defineProperty(draft, \"\" + i, proxyProperty(i, true))\n\t\t\treturn draft\n\t\t} else {\n\t\t\tconst descriptors = getOwnPropertyDescriptors(base)\n\t\t\tdelete descriptors[DRAFT_STATE as any]\n\t\t\tconst keys = ownKeys(descriptors)\n\t\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\t\tconst key: any = keys[i]\n\t\t\t\tdescriptors[key] = proxyProperty(\n\t\t\t\t\tkey,\n\t\t\t\t\tisArray || !!descriptors[key].enumerable\n\t\t\t\t)\n\t\t\t}\n\t\t\treturn Object.create(Object.getPrototypeOf(base), descriptors)\n\t\t}\n\t}\n\n\tfunction createES5Proxy_<T>(\n\t\tbase: T,\n\t\tparent?: ImmerState\n\t): Drafted<T, ES5ObjectState | ES5ArrayState> {\n\t\tconst isArray = Array.isArray(base)\n\t\tconst draft = createES5Draft(isArray, base)\n\n\t\tconst state: ES5ObjectState | ES5ArrayState = {\n\t\t\ttype_: isArray ? ProxyType.ES5Array : (ProxyType.ES5Object as any),\n\t\t\tscope_: parent ? parent.scope_ : getCurrentScope(),\n\t\t\tmodified_: false,\n\t\t\tfinalized_: false,\n\t\t\tassigned_: {},\n\t\t\tparent_: parent,\n\t\t\t// base is the object we are drafting\n\t\t\tbase_: base,\n\t\t\t// draft is the draft object itself, that traps all reads and reads from either the base (if unmodified) or copy (if modified)\n\t\t\tdraft_: draft,\n\t\t\tcopy_: null,\n\t\t\trevoked_: false,\n\t\t\tisManual_: false\n\t\t}\n\n\t\tObject.defineProperty(draft, DRAFT_STATE, {\n\t\t\tvalue: state,\n\t\t\t// enumerable: false <- the default\n\t\t\twritable: true\n\t\t})\n\t\treturn draft\n\t}\n\n\t// property descriptors are recycled to make sure we don't create a get and set closure per property,\n\t// but share them all instead\n\tconst descriptors: {[prop: string]: PropertyDescriptor} = {}\n\n\tfunction proxyProperty(\n\t\tprop: string | number,\n\t\tenumerable: boolean\n\t): PropertyDescriptor {\n\t\tlet desc = descriptors[prop]\n\t\tif (desc) {\n\t\t\tdesc.enumerable = enumerable\n\t\t} else {\n\t\t\tdescriptors[prop] = desc = {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable,\n\t\t\t\tget(this: any) {\n\t\t\t\t\tconst state = this[DRAFT_STATE]\n\t\t\t\t\tif (__DEV__) assertUnrevoked(state)\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\treturn objectTraps.get(state, prop)\n\t\t\t\t},\n\t\t\t\tset(this: any, value) {\n\t\t\t\t\tconst state = this[DRAFT_STATE]\n\t\t\t\t\tif (__DEV__) assertUnrevoked(state)\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tobjectTraps.set(state, prop, value)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn desc\n\t}\n\n\t// This looks expensive, but only proxies are visited, and only objects without known changes are scanned.\n\tfunction markChangesSweep(drafts: Drafted<any, ImmerState>[]) {\n\t\t// The natural order of drafts in the `scope` array is based on when they\n\t\t// were accessed. By processing drafts in reverse natural order, we have a\n\t\t// better chance of processing leaf nodes first. When a leaf node is known to\n\t\t// have changed, we can avoid any traversal of its ancestor nodes.\n\t\tfor (let i = drafts.length - 1; i >= 0; i--) {\n\t\t\tconst state: ES5State = drafts[i][DRAFT_STATE]\n\t\t\tif (!state.modified_) {\n\t\t\t\tswitch (state.type_) {\n\t\t\t\t\tcase ProxyType.ES5Array:\n\t\t\t\t\t\tif (hasArrayChanges(state)) markChanged(state)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase ProxyType.ES5Object:\n\t\t\t\t\t\tif (hasObjectChanges(state)) markChanged(state)\n\t\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction markChangesRecursively(object: any) {\n\t\tif (!object || typeof object !== \"object\") return\n\t\tconst state: ES5State | undefined = object[DRAFT_STATE]\n\t\tif (!state) return\n\t\tconst {base_, draft_, assigned_, type_} = state\n\t\tif (type_ === ProxyType.ES5Object) {\n\t\t\t// Look for added keys.\n\t\t\t// probably there is a faster way to detect changes, as sweep + recurse seems to do some\n\t\t\t// unnecessary work.\n\t\t\t// also: probably we can store the information we detect here, to speed up tree finalization!\n\t\t\teach(draft_, key => {\n\t\t\t\tif ((key as any) === DRAFT_STATE) return\n\t\t\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\t\t\tif ((base_ as any)[key] === undefined && !has(base_, key)) {\n\t\t\t\t\tassigned_[key] = true\n\t\t\t\t\tmarkChanged(state)\n\t\t\t\t} else if (!assigned_[key]) {\n\t\t\t\t\t// Only untouched properties trigger recursion.\n\t\t\t\t\tmarkChangesRecursively(draft_[key])\n\t\t\t\t}\n\t\t\t})\n\t\t\t// Look for removed keys.\n\t\t\teach(base_, key => {\n\t\t\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\t\t\tif (draft_[key] === undefined && !has(draft_, key)) {\n\t\t\t\t\tassigned_[key] = false\n\t\t\t\t\tmarkChanged(state)\n\t\t\t\t}\n\t\t\t})\n\t\t} else if (type_ === ProxyType.ES5Array) {\n\t\t\tif (hasArrayChanges(state as ES5ArrayState)) {\n\t\t\t\tmarkChanged(state)\n\t\t\t\tassigned_.length = true\n\t\t\t}\n\n\t\t\tif (draft_.length < base_.length) {\n\t\t\t\tfor (let i = draft_.length; i < base_.length; i++) assigned_[i] = false\n\t\t\t} else {\n\t\t\t\tfor (let i = base_.length; i < draft_.length; i++) assigned_[i] = true\n\t\t\t}\n\n\t\t\t// Minimum count is enough, the other parts has been processed.\n\t\t\tconst min = Math.min(draft_.length, base_.length)\n\n\t\t\tfor (let i = 0; i < min; i++) {\n\t\t\t\t// Only untouched indices trigger recursion.\n\t\t\t\tif (!draft_.hasOwnProperty(i)) {\n\t\t\t\t\tassigned_[i] = true\n\t\t\t\t}\n\t\t\t\tif (assigned_[i] === undefined) markChangesRecursively(draft_[i])\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction hasObjectChanges(state: ES5ObjectState) {\n\t\tconst {base_, draft_} = state\n\n\t\t// Search for added keys and changed keys. Start at the back, because\n\t\t// non-numeric keys are ordered by time of definition on the object.\n\t\tconst keys = ownKeys(draft_)\n\t\tfor (let i = keys.length - 1; i >= 0; i--) {\n\t\t\tconst key: any = keys[i]\n\t\t\tif (key === DRAFT_STATE) continue\n\t\t\tconst baseValue = base_[key]\n\t\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\t\tif (baseValue === undefined && !has(base_, key)) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t\t// Once a base key is deleted, future changes go undetected, because its\n\t\t\t// descriptor is erased. This branch detects any missed changes.\n\t\t\telse {\n\t\t\t\tconst value = draft_[key]\n\t\t\t\tconst state: ImmerState = value && value[DRAFT_STATE]\n\t\t\t\tif (state ? state.base_ !== baseValue : !is(value, baseValue)) {\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// At this point, no keys were added or changed.\n\t\t// Compare key count to determine if keys were deleted.\n\t\tconst baseIsDraft = !!base_[DRAFT_STATE as any]\n\t\treturn keys.length !== ownKeys(base_).length + (baseIsDraft ? 0 : 1) // + 1 to correct for DRAFT_STATE\n\t}\n\n\tfunction hasArrayChanges(state: ES5ArrayState) {\n\t\tconst {draft_} = state\n\t\tif (draft_.length !== state.base_.length) return true\n\t\t// See #116\n\t\t// If we first shorten the length, our array interceptors will be removed.\n\t\t// If after that new items are added, result in the same original length,\n\t\t// those last items will have no intercepting property.\n\t\t// So if there is no own descriptor on the last position, we know that items were removed and added\n\t\t// N.B.: splice, unshift, etc only shift values around, but not prop descriptors, so we only have to check\n\t\t// the last one\n\t\t// last descriptor can be not a trap, if the array was extended\n\t\tconst descriptor = Object.getOwnPropertyDescriptor(\n\t\t\tdraft_,\n\t\t\tdraft_.length - 1\n\t\t)\n\t\t// descriptor can be null, but only for newly created sparse arrays, eg. new Array(10)\n\t\tif (descriptor && !descriptor.get) return true\n\t\t// if we miss a property, it has been deleted, so array probobaly changed\n\t\tfor (let i = 0; i < draft_.length; i++) {\n\t\t\tif (!draft_.hasOwnProperty(i)) return true\n\t\t}\n\t\t// For all other cases, we don't have to compare, as they would have been picked up by the index setters\n\t\treturn false\n\t}\n\n\tfunction hasChanges_(state: ES5State) {\n\t\treturn state.type_ === ProxyType.ES5Object\n\t\t\t? hasObjectChanges(state)\n\t\t\t: hasArrayChanges(state)\n\t}\n\n\tfunction assertUnrevoked(state: any /*ES5State | MapState | SetState*/) {\n\t\tif (state.revoked_) die(3, JSON.stringify(latest(state)))\n\t}\n\n\tloadPlugin(\"ES5\", {\n\t\tcreateES5Proxy_,\n\t\twillFinalizeES5_,\n\t\thasChanges_\n\t})\n}\n","import {immerable} from \"../immer\"\nimport {\n\tImmerState,\n\tPatch,\n\tSetState,\n\tES5ArrayState,\n\tProxyArrayState,\n\tMapState,\n\tES5ObjectState,\n\tProxyObjectState,\n\tPatchPath,\n\tget,\n\teach,\n\thas,\n\tgetArchtype,\n\tisSet,\n\tisMap,\n\tloadPlugin,\n\tProxyType,\n\tArchtype,\n\tdie,\n\tisDraft,\n\tisDraftable,\n\tNOTHING\n} from \"../internal\"\n\nexport function enablePatches() {\n\tconst REPLACE = \"replace\"\n\tconst ADD = \"add\"\n\tconst REMOVE = \"remove\"\n\n\tfunction generatePatches_(\n\t\tstate: ImmerState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t): void {\n\t\tswitch (state.type_) {\n\t\t\tcase ProxyType.ProxyObject:\n\t\t\tcase ProxyType.ES5Object:\n\t\t\tcase ProxyType.Map:\n\t\t\t\treturn generatePatchesFromAssigned(\n\t\t\t\t\tstate,\n\t\t\t\t\tbasePath,\n\t\t\t\t\tpatches,\n\t\t\t\t\tinversePatches\n\t\t\t\t)\n\t\t\tcase ProxyType.ES5Array:\n\t\t\tcase ProxyType.ProxyArray:\n\t\t\t\treturn generateArrayPatches(state, basePath, patches, inversePatches)\n\t\t\tcase ProxyType.Set:\n\t\t\t\treturn generateSetPatches(\n\t\t\t\t\t(state as any) as SetState,\n\t\t\t\t\tbasePath,\n\t\t\t\t\tpatches,\n\t\t\t\t\tinversePatches\n\t\t\t\t)\n\t\t}\n\t}\n\n\tfunction generateArrayPatches(\n\t\tstate: ES5ArrayState | ProxyArrayState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tlet {base_, assigned_} = state\n\t\tlet copy_ = state.copy_!\n\n\t\t// Reduce complexity by ensuring `base` is never longer.\n\t\tif (copy_.length < base_.length) {\n\t\t\t// @ts-ignore\n\t\t\t;[base_, copy_] = [copy_, base_]\n\t\t\t;[patches, inversePatches] = [inversePatches, patches]\n\t\t}\n\n\t\t// Process replaced indices.\n\t\tfor (let i = 0; i < base_.length; i++) {\n\t\t\tif (assigned_[i] && copy_[i] !== base_[i]) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: REPLACE,\n\t\t\t\t\tpath,\n\t\t\t\t\t// Need to maybe clone it, as it can in fact be the original value\n\t\t\t\t\t// due to the base/copy inversion at the start of this function\n\t\t\t\t\tvalue: clonePatchValueIfNeeded(copy_[i])\n\t\t\t\t})\n\t\t\t\tinversePatches.push({\n\t\t\t\t\top: REPLACE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue: clonePatchValueIfNeeded(base_[i])\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\t// Process added indices.\n\t\tfor (let i = base_.length; i < copy_.length; i++) {\n\t\t\tconst path = basePath.concat([i])\n\t\t\tpatches.push({\n\t\t\t\top: ADD,\n\t\t\t\tpath,\n\t\t\t\t// Need to maybe clone it, as it can in fact be the original value\n\t\t\t\t// due to the base/copy inversion at the start of this function\n\t\t\t\tvalue: clonePatchValueIfNeeded(copy_[i])\n\t\t\t})\n\t\t}\n\t\tif (base_.length < copy_.length) {\n\t\t\tinversePatches.push({\n\t\t\t\top: REPLACE,\n\t\t\t\tpath: basePath.concat([\"length\"]),\n\t\t\t\tvalue: base_.length\n\t\t\t})\n\t\t}\n\t}\n\n\t// This is used for both Map objects and normal objects.\n\tfunction generatePatchesFromAssigned(\n\t\tstate: MapState | ES5ObjectState | ProxyObjectState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tconst {base_, copy_} = state\n\t\teach(state.assigned_!, (key, assignedValue) => {\n\t\t\tconst origValue = get(base_, key)\n\t\t\tconst value = get(copy_!, key)\n\t\t\tconst op = !assignedValue ? REMOVE : has(base_, key) ? REPLACE : ADD\n\t\t\tif (origValue === value && op === REPLACE) return\n\t\t\tconst path = basePath.concat(key as any)\n\t\t\tpatches.push(op === REMOVE ? {op, path} : {op, path, value})\n\t\t\tinversePatches.push(\n\t\t\t\top === ADD\n\t\t\t\t\t? {op: REMOVE, path}\n\t\t\t\t\t: op === REMOVE\n\t\t\t\t\t? {op: ADD, path, value: clonePatchValueIfNeeded(origValue)}\n\t\t\t\t\t: {op: REPLACE, path, value: clonePatchValueIfNeeded(origValue)}\n\t\t\t)\n\t\t})\n\t}\n\n\tfunction generateSetPatches(\n\t\tstate: SetState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tlet {base_, copy_} = state\n\n\t\tlet i = 0\n\t\tbase_.forEach((value: any) => {\n\t\t\tif (!copy_!.has(value)) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: REMOVE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t\tinversePatches.unshift({\n\t\t\t\t\top: ADD,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t}\n\t\t\ti++\n\t\t})\n\t\ti = 0\n\t\tcopy_!.forEach((value: any) => {\n\t\t\tif (!base_.has(value)) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: ADD,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t\tinversePatches.unshift({\n\t\t\t\t\top: REMOVE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t}\n\t\t\ti++\n\t\t})\n\t}\n\n\tfunction generateReplacementPatches_(\n\t\tbaseValue: any,\n\t\treplacement: any,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t): void {\n\t\tpatches.push({\n\t\t\top: REPLACE,\n\t\t\tpath: [],\n\t\t\tvalue: replacement === NOTHING ? undefined : replacement\n\t\t})\n\t\tinversePatches.push({\n\t\t\top: REPLACE,\n\t\t\tpath: [],\n\t\t\tvalue: baseValue\n\t\t})\n\t}\n\n\tfunction applyPatches_<T>(draft: T, patches: Patch[]): T {\n\t\tpatches.forEach(patch => {\n\t\t\tconst {path, op} = patch\n\n\t\t\tlet base: any = draft\n\t\t\tfor (let i = 0; i < path.length - 1; i++) {\n\t\t\t\tconst parentType = getArchtype(base)\n\t\t\t\tconst p = \"\" + path[i]\n\t\t\t\t// See #738, avoid prototype pollution\n\t\t\t\tif (\n\t\t\t\t\t(parentType === Archtype.Object || parentType === Archtype.Array) &&\n\t\t\t\t\t(p === \"__proto__\" || p === \"constructor\")\n\t\t\t\t)\n\t\t\t\t\tdie(24)\n\t\t\t\tif (typeof base === \"function\" && p === \"prototype\") die(24)\n\t\t\t\tbase = get(base, p)\n\t\t\t\tif (typeof base !== \"object\") die(15, path.join(\"/\"))\n\t\t\t}\n\n\t\t\tconst type = getArchtype(base)\n\t\t\tconst value = deepClonePatchValue(patch.value) // used to clone patch to ensure original patch is not modified, see #411\n\t\t\tconst key = path[path.length - 1]\n\t\t\tswitch (op) {\n\t\t\t\tcase REPLACE:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase Archtype.Map:\n\t\t\t\t\t\t\treturn base.set(key, value)\n\t\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\t\tcase Archtype.Set:\n\t\t\t\t\t\t\tdie(16)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// if value is an object, then it's assigned by reference\n\t\t\t\t\t\t\t// in the following add or remove ops, the value field inside the patch will also be modifyed\n\t\t\t\t\t\t\t// so we use value from the cloned patch\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\treturn (base[key] = value)\n\t\t\t\t\t}\n\t\t\t\tcase ADD:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase Archtype.Array:\n\t\t\t\t\t\t\treturn key === \"-\"\n\t\t\t\t\t\t\t\t? base.push(value)\n\t\t\t\t\t\t\t\t: base.splice(key as any, 0, value)\n\t\t\t\t\t\tcase Archtype.Map:\n\t\t\t\t\t\t\treturn base.set(key, value)\n\t\t\t\t\t\tcase Archtype.Set:\n\t\t\t\t\t\t\treturn base.add(value)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn (base[key] = value)\n\t\t\t\t\t}\n\t\t\t\tcase REMOVE:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase Archtype.Array:\n\t\t\t\t\t\t\treturn base.splice(key as any, 1)\n\t\t\t\t\t\tcase Archtype.Map:\n\t\t\t\t\t\t\treturn base.delete(key)\n\t\t\t\t\t\tcase Archtype.Set:\n\t\t\t\t\t\t\treturn base.delete(patch.value)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn delete base[key]\n\t\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tdie(17, op)\n\t\t\t}\n\t\t})\n\n\t\treturn draft\n\t}\n\n\t// optimize: this is quite a performance hit, can we detect intelligently when it is needed?\n\t// E.g. auto-draft when new objects from outside are assigned and modified?\n\t// (See failing test when deepClone just returns obj)\n\tfunction deepClonePatchValue<T>(obj: T): T\n\tfunction deepClonePatchValue(obj: any) {\n\t\tif (!isDraftable(obj)) return obj\n\t\tif (Array.isArray(obj)) return obj.map(deepClonePatchValue)\n\t\tif (isMap(obj))\n\t\t\treturn new Map(\n\t\t\t\tArray.from(obj.entries()).map(([k, v]) => [k, deepClonePatchValue(v)])\n\t\t\t)\n\t\tif (isSet(obj)) return new Set(Array.from(obj).map(deepClonePatchValue))\n\t\tconst cloned = Object.create(Object.getPrototypeOf(obj))\n\t\tfor (const key in obj) cloned[key] = deepClonePatchValue(obj[key])\n\t\tif (has(obj, immerable)) cloned[immerable] = obj[immerable]\n\t\treturn cloned\n\t}\n\n\tfunction clonePatchValueIfNeeded<T>(obj: T): T {\n\t\tif (isDraft(obj)) {\n\t\t\treturn deepClonePatchValue(obj)\n\t\t} else return obj\n\t}\n\n\tloadPlugin(\"Patches\", {\n\t\tapplyPatches_,\n\t\tgeneratePatches_,\n\t\tgenerateReplacementPatches_\n\t})\n}\n","import {\n\tIProduce,\n\tIProduceWithPatches,\n\tImmer,\n\tDraft,\n\tImmutable\n} from \"./internal\"\n\nexport {\n\tDraft,\n\tImmutable,\n\tPatch,\n\tPatchListener,\n\toriginal,\n\tcurrent,\n\tisDraft,\n\tisDraftable,\n\tNOTHING as nothing,\n\tDRAFTABLE as immerable,\n\tfreeze\n} from \"./internal\"\n\nconst immer = new Immer()\n\n/**\n * The `produce` function takes a value and a \"recipe function\" (whose\n * return value often depends on the base state). The recipe function is\n * free to mutate its first argument however it wants. All mutations are\n * only ever applied to a __copy__ of the base state.\n *\n * Pass only a function to create a \"curried producer\" which relieves you\n * from passing the recipe function every time.\n *\n * Only plain objects and arrays are made mutable. All other objects are\n * considered uncopyable.\n *\n * Note: This function is __bound__ to its `Immer` instance.\n *\n * @param {any} base - the initial state\n * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n * @param {Function} patchListener - optional function that will be called with all the patches produced here\n * @returns {any} a new state, or the initial state if nothing was modified\n */\nexport const produce: IProduce = immer.produce\nexport default produce\n\n/**\n * Like `produce`, but `produceWithPatches` always returns a tuple\n * [nextState, patches, inversePatches] (instead of just the next state)\n */\nexport const produceWithPatches: IProduceWithPatches = immer.produceWithPatches.bind(\n\timmer\n)\n\n/**\n * Pass true to automatically freeze all copies created by Immer.\n *\n * Always freeze by default, even in production mode\n */\nexport const setAutoFreeze = immer.setAutoFreeze.bind(immer)\n\n/**\n * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\n * always faster than using ES5 proxies.\n *\n * By default, feature detection is used, so calling this is rarely necessary.\n */\nexport const setUseProxies = immer.setUseProxies.bind(immer)\n\n/**\n * Apply an array of Immer patches to the first argument.\n *\n * This function is a producer, which means copy-on-write is in effect.\n */\nexport const applyPatches = immer.applyPatches.bind(immer)\n\n/**\n * Create an Immer draft from the given base state, which may be a draft itself.\n * The draft can be modified until you finalize it with the `finishDraft` function.\n */\nexport const createDraft = immer.createDraft.bind(immer)\n\n/**\n * Finalize an Immer draft from a `createDraft` call, returning the base state\n * (if no changes were made) or a modified copy. The draft must *not* be\n * mutated afterwards.\n *\n * Pass a function as the 2nd argument to generate Immer patches based on the\n * changes that were made.\n */\nexport const finishDraft = immer.finishDraft.bind(immer)\n\n/**\n * This function is actually a no-op, but can be used to cast an immutable type\n * to an draft type and make TypeScript happy\n *\n * @param value\n */\nexport function castDraft<T>(value: T): Draft<T> {\n\treturn value as any\n}\n\n/**\n * This function is actually a no-op, but can be used to cast a mutable type\n * to an immutable type and make TypeScript happy\n * @param value\n */\nexport function castImmutable<T>(value: T): Immutable<T> {\n\treturn value as any\n}\n\nexport {Immer}\n\nexport {enableES5} from \"./plugins/es5\"\nexport {enablePatches} from \"./plugins/patches\"\nexport {enableMapSet} from \"./plugins/mapset\"\nexport {enableAllPlugins} from \"./plugins/all\"\n","// Should be no imports here!\n\n// Some things that should be evaluated before all else...\n\n// We only want to know if non-polyfilled symbols are available\nconst hasSymbol =\n\ttypeof Symbol !== \"undefined\" && typeof Symbol(\"x\") === \"symbol\"\nexport const hasMap = typeof Map !== \"undefined\"\nexport const hasSet = typeof Set !== \"undefined\"\nexport const hasProxies =\n\ttypeof Proxy !== \"undefined\" &&\n\ttypeof Proxy.revocable !== \"undefined\" &&\n\ttypeof Reflect !== \"undefined\"\n\n/**\n * The sentinel value returned by producers to replace the draft with undefined.\n */\nexport const NOTHING: Nothing = hasSymbol\n\t? Symbol.for(\"immer-nothing\")\n\t: ({[\"immer-nothing\"]: true} as any)\n\n/**\n * To let Immer treat your class instances as plain immutable objects\n * (albeit with a custom prototype), you must define either an instance property\n * or a static property on each of your custom classes.\n *\n * Otherwise, your class instance will never be drafted, which means it won't be\n * safe to mutate in a produce callback.\n */\nexport const DRAFTABLE: unique symbol = hasSymbol\n\t? Symbol.for(\"immer-draftable\")\n\t: (\"__$immer_draftable\" as any)\n\nexport const DRAFT_STATE: unique symbol = hasSymbol\n\t? Symbol.for(\"immer-state\")\n\t: (\"__$immer_state\" as any)\n\n// Even a polyfilled Symbol might provide Symbol.iterator\nexport const iteratorSymbol: typeof Symbol.iterator =\n\t(typeof Symbol != \"undefined\" && Symbol.iterator) || (\"@@iterator\" as any)\n\n/** Use a class type for `nothing` so its type is unique */\nexport class Nothing {\n\t// This lets us do `Exclude<T, Nothing>`\n\t// @ts-ignore\n\tprivate _!: unique symbol\n}\n"],"names":["exports","read","buffer","offset","isLE","mLen","nBytes","e","m","eLen","eMax","eBias","nBits","i","d","s","NaN","Infinity","Math","pow","write","value","c","rt","abs","isNaN","floor","log","LN2","n","r","arguments","length","t","Array","Error","map","join","Q","Object","getPrototypeOf","hasOwnProperty","call","constructor","Function","toString","Z","isArray","L","v","o","keys","nn","forEach","u","has","prototype","a","get","f","set","delete","add","X","Map","q","Set","p","l","slice","rn","writable","configurable","enumerable","create","y","clear","h","freeze","isFrozen","b","tn","_","U","j","O","g","S","w","P","M","x","H","A","I","k","R","D","concat","F","z","getOwnPropertyDescriptor","E","N","T","C","en","on","Proxy","revocable","revoke","proxy","J","push","K","from","this","defineProperty","min","entries","$","path","op","splice","unshift","G","W","Symbol","B","Reflect","for","iterator","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","getOwnPropertyDescriptors","deleteProperty","setPrototypeOf","apply","un","produce","Promise","then","produceWithPatches","useProxies","setUseProxies","autoFreeze","setAutoFreeze","createDraft","finishDraft","applyPatches","an","fn","cn","bind","pn"],"sourceRoot":""}